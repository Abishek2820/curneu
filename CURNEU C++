#READING A VIDEO FILE
video=VideoReader('C:\Users\abi20\Desktop\curneu.mp4');

vidHeight=video.Height; 
vidWidth=video.Width; 

k=1;
while hasFrame(video)
    allframes(k).cdata = readFrame(video);
    k = k+1;
end
i=1;
while hasFrame(video)
frames(i,:)=impixel(allframes(i).cdata,1:vidHeight-1,1:vidHeight-1);
i=i+1;
end
#MATPLOB CODE FOR TAKING READINGS OF RGB
Mat img;
number = 0;
VideoCapture cap(filename_input_video);
if(!cap.isOpened()) {
    printf("No video to Read!\n");
    return -1;
}

for( ; ; ) {
    cap >> img;
    if(img.empty())
        break;
    number++;

    for(int i=0; i<img.rows; i++) {
        for(int j=0; j<img.cols; j++) {
            int blue = img.at<Vec3b>(i, j)[0];
            int green = img.at<Vec3b>(i, j)[1];
            int red = img.at<Vec3b>(i, j)[2];

            if(number == 200 && i==0 && j==0) {
                printf("blue=%d green=%d red=%d", blue, green, red);
            }
        }
    }

    if(number == 200) {
        number = 0;
    }
}
#GRAPH REPRESENTATION 
nclude <iostream> 
#include <pngwriter.h> 
#include <string> 

  
// Function to generate PNG image 

void generate_PNG(int const width, 

                  int const height, 

                  std::string filepath) 
{ 

  

    // Print the filepath 

    cout << endl 

         << "Filepath: "

         << filepath.c_str(); 

  

    // Generate the flag 

    pngwriter flag{ width, height, 0, 

                    filepath.data() }; 

  

    // Calculate sizes 

    int const size = width / 3; 

  

    // Fill the squares 

    flag.filledsquare(0, 0, size, 

                      2 * size, 0, 

                      0, 65535); 

  

    flag.filledsquare(size, 0, 2 * size, 

                      2 * size, 0, 

                      65535, 65535); 

  

    flag.filledsquare(2 * size, 0, 

                      3 * size, 2 * size, 

                      65535, 0, 65535); 

  

    // Close the flag 

    flag.close(); 
} 

  
// Driver code 

int main() 
{ 

    // Given width and height 

    int width = 300, height = 200; 

  

    // Filepath 

    std::string filepath; 

  

    // Function call to generate PNG image 

    generate_PNG(width, height, filepath); 

  

    return 0; 
}
#PIXEL VARIATION IN A VIDEO
# include<opencv2/imgcodecs.hpp>
# include<opencv2/highgui.hpp>
# include<opencv2/imgproc.hpp>
# include<opencv2/objdetect.hpp>
# include<iostream>

using namespace cv;
using namespace std;

void main() {
	string path = "DS-IQ-003-PixelVariation-Video.mp4";
	VideoCapture cap(path);
	Mat img;

	while (true) {
		cap.read(img);
		vector<Mat> bgr_planes;
		split(img, bgr_planes);

		int histSize = 256;

		float range[] = { 0, 256 };
		const float* histRange = { range };


		Mat b_hist, g_hist, r_hist;

		calcHist(&bgr_planes[0], 1, 0, Mat(), b_hist, 1, &histSize, &histRange, true, false);
		calcHist(&bgr_planes[1], 1, 0, Mat(), g_hist, 1, &histSize, &histRange, true, false);
		calcHist(&bgr_planes[2], 1, 0, Mat(), r_hist, 1, &histSize, &histRange, true, false);
		
		int hist_w = 400; int hist_h = 400;
		int bin_w = cvRound((double)hist_w / histSize);

		Mat histImage(hist_h, hist_w, CV_8UC3, Scalar(255, 255, 255));

		normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
		normalize(g_hist, g_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
		normalize(r_hist, r_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());

		for (int i = 1; i < histSize; i++)
		{
			line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(b_hist.at<float>(i - 1))),
				Point(bin_w * (i), hist_h - cvRound(b_hist.at<float>(i))),Scalar(255, 0, 0), 2, 8, 0);
			line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(g_hist.at<float>(i - 1))),
				Point(bin_w * (i), hist_h - cvRound(g_hist.at<float>(i))),Scalar(0, 255, 0), 2, 8, 0);
			line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(r_hist.at<float>(i - 1))),
				Point(bin_w * (i), hist_h - cvRound(r_hist.at<float>(i))),Scalar(0, 0, 255), 2, 8, 0);
		}

		imshow("Pixel Variation", histImage);
		imshow("Video", img);
		waitKey(30);
	}
}
